// EP12_Highly_divisible_triangular_number.cpp : Defines the entry point for the console application.
//

//The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be :
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers :
//
//1 : 1
//3 : 1, 3
//6 : 1, 2, 3, 6
//10 : 1, 2, 5, 10
//15 : 1, 3, 5, 15
//21 : 1, 3, 7, 21
//28 : 1, 2, 4, 7, 14, 28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors ?

#include <math.h>
#include <vector>
#include <iostream>

using namespace std;

bool IsPrime(int x, const vector<int>& vr)
{
	auto x_sqrt = sqrt((double)x);
	for (int i = 0; vr[i] <= x_sqrt; ++i) {
		if ((x % vr[i]) == 0) {
			return false;
		}
	}
	return true;
}

int NumberOfDivisors(int n, const vector<int>& primes, vector<int> factor_exponents){
	int number_of_divisors = 1;
	int n_divided = n;
	int n_half = n / 2;
	for (int i = 0; primes[i] <= n_divided/2; ++i) {
		while ((n_divided % primes[i]) == 0) {
			n_divided /= primes[i];
			factor_exponents[i] += 1;
		}
		number_of_divisors *= (factor_exponents[i] + 1);
	}
	if ( find(primes.begin(), primes.end(), n_divided) != primes.end() ){
		number_of_divisors *= 2;
	}
	
	return number_of_divisors;
}

int main(int argc, char* argv[])
{
	int n = 3;
	int T_n; 
	int number_of_divisors = 1;
	int min_nr = 500;
	vector<int> primes(1, 2);
	primes.push_back(3);
	vector<int> factor_exponents(2, 0);

	while (number_of_divisors <= min_nr){
		T_n = (n * (n + 1)) / 2;
			
		for (int i = (T_n - n + 1); i < T_n; ++i){
			if (IsPrime(i, primes)){
				primes.push_back(i);
				factor_exponents.push_back(0);
			}
		}

		number_of_divisors = NumberOfDivisors(T_n, primes, factor_exponents);
		cout << T_n << ": " << number_of_divisors << endl;
		++n;
	}

	cout << T_n << endl;

	return 0;
}

